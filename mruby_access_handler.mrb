# frozen_string_literal: true

region = ENV['AWS_REGION'] || ENV['AWS_DEFAULT_REGION']
endpoint = ENV['AWS_S3_ENDPOINT']
access_key = ENV['AWS_ACCESS_KEY_ID']
secret_key = ENV['AWS_SECRET_ACCESS_KEY']
security_token = ENV['AWS_SECURITY_TOKEN']

request = Nginx::Request.new
method = request.method.upcase
path = request.uri
time = Time.now.utc
body = ''
body = request.get_body if method.match(/^(?:PUT|POST)$/)

sha256sum = Digest::SHA256.hexdigest(body)
date = time.strftime('%Y%m%dT%H%M%SZ')

signed_headers = {
  'host'                 => endpoint.to_s.strip,
  'content-type'         => (request.var.content_type.to_s.strip if request.var.content_type.to_s.strip != ''),
  'x-real-ip'            => (request.var.proxy_protocol_addr.to_s.strip if request.var.proxy_protocol_addr.to_s.strip != ''),
  'x-forwarded-for'      => (request.var.proxy_protocol_addr.to_s.strip if request.var.proxy_protocol_addr.to_s.strip != ''),
  'x-amz-security-token' => (security_token.to_s.strip if security_token.to_s.strip != ''),
  'x-amz-content-sha256' => sha256sum,
  'x-amz-date'           => date,
}.compact.sort.to_h

Nginx.errlogger Nginx::LOG_INFO, "signed_headers: #{signed_headers.keys.join(';')}"

canonical_request = []
canonical_request.push(method)
canonical_request.push(path)
canonical_request.push('')
signed_headers.each do |k, v|
  canonical_request.push("#{k}:#{v}")
end
canonical_request.push('')
canonical_request.push(signed_headers.keys.join(';'))
canonical_request.push(sha256sum)

Nginx.errlogger Nginx::LOG_INFO, "canonical_request: #{canonical_request.join("\n")}"

scope = [time.strftime('%Y%m%d'), region, 's3', 'aws4_request']

signature_v4_request = []
signature_v4_request.push('AWS4-HMAC-SHA256')
signature_v4_request.push(date)
signature_v4_request.push(scope.join('/'))
signature_v4_request.push(Digest::SHA256.hexdigest(canonical_request.join("\n")))

Nginx.errlogger Nginx::LOG_INFO, "signature_v4_request: #{signature_v4_request.join("\n")}"

signing_key = "AWS4#{secret_key}"
scope.each do |v|
  signing_key = Digest::HMAC.digest(v, signing_key, Digest::SHA256)
end
signature = Digest::HMAC.hexdigest(signature_v4_request.join("\n"), signing_key, Digest::SHA256)

authorization = []
authorization.push("AWS4-HMAC-SHA256 Credential=#{access_key}/#{scope.join('/')}")
authorization.push("SignedHeaders=#{signed_headers.keys.join(';')}")
authorization.push("Signature=#{signature}")

Nginx.errlogger Nginx::LOG_INFO, "authorization: #{authorization.join(',')}"

request.var.s3_endpoint_domain_name = endpoint
request.var.authorization = authorization.join(',')
request.var.x_amz_security_token = security_token if security_token != ''
request.var.x_amz_content_sha256 = sha256sum
request.var.x_amz_date = date

Nginx.return Nginx::DECLINED

# vim: set ft=ruby :
